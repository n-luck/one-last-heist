// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Character {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  slug             String   @unique(map: "character_slug_idx")
  campaign         String
  image            String?
  player           String
  primaryRole      String
  secondaryRole    String
  secondaryRole2   String
  look             String?
  background       String?
  stress           String[]
  assets           String?
  notes            String?
  specialAbilities String[]
  conditions       String[]
  bonds            String[]
  pronouns         String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  password      String?
  role          String    @default("user")

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now())

  account Account[]
  Session Session[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expiresAt         Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
